# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import detect_pb2 as detect__pb2


class DetectServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.updateAlgorithmConfig = channel.unary_unary(
                '/com.yimuzn.nutsdetection.device.grpc.DetectService/updateAlgorithmConfig',
                request_serializer=detect__pb2.AlgorithmConfigRequest.SerializeToString,
                response_deserializer=detect__pb2.CommonResponse.FromString,
                )
        self.streamVideo = channel.stream_stream(
                '/com.yimuzn.nutsdetection.device.grpc.DetectService/streamVideo',
                request_serializer=detect__pb2.FrameRequest.SerializeToString,
                response_deserializer=detect__pb2.FrameResponse.FromString,
                )


class DetectServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def updateAlgorithmConfig(self, request, context):
        """更新算法配置(单向)
        【软件--->算法】，更新底层算法配置,或者切换底层算子
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamVideo(self, request_iterator, context):
        """视频帧流式检测接口(双向)
        【软件--->算法】 + 【算法--->软件】
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DetectServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'updateAlgorithmConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.updateAlgorithmConfig,
                    request_deserializer=detect__pb2.AlgorithmConfigRequest.FromString,
                    response_serializer=detect__pb2.CommonResponse.SerializeToString,
            ),
            'streamVideo': grpc.stream_stream_rpc_method_handler(
                    servicer.streamVideo,
                    request_deserializer=detect__pb2.FrameRequest.FromString,
                    response_serializer=detect__pb2.FrameResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.yimuzn.nutsdetection.device.grpc.DetectService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DetectService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def updateAlgorithmConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.yimuzn.nutsdetection.device.grpc.DetectService/updateAlgorithmConfig',
            detect__pb2.AlgorithmConfigRequest.SerializeToString,
            detect__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamVideo(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/com.yimuzn.nutsdetection.device.grpc.DetectService/streamVideo',
            detect__pb2.FrameRequest.SerializeToString,
            detect__pb2.FrameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
